#!/bin/sh

###############
# global vars #
###############
# load common functions
. /usr/share/natfree-common/natfree-common

# get default route iface
GW_IFACE="$(get_gw_iface)"

# name of virtual iface to assign when
# GW_IFACE brings up
SRV_VIRTUAL_IFACE="natfree00"


#############
# functions #
#############

usage(){
        die "Usage" "$(basename "$0") [options]" \
            "       options:" \
            "           -a            : automagic detection/default parameters" \
            "           -n NUMBER     : IP number/position in subnet" \
            "           -i PHYS_IFACE : physical interface name (defaults to $GW_IFACE)" \
            "           -v VIRT_IFACE : virtual interface name (defaults to $SRV_VIRTUAL_IFACE)"
}

main(){
	# check parameters
	[ "$1" ] || usage
	while [ "$1" ] ; do
		case "$1" in
			-n)
				shift
				SRV_IP_NUMBER="$1"
				;;
			-v)
				shift
				SRV_VIRTUAL_IFACE="$1"
				;;
			-i)
				shift
				GW_IFACE="$1"
				;;
			-a)
				# use default
				;;
			*)
				usage
				;;
		esac

		# validate
		echo "$SRV_IP_NUMBER" |grep -q "^[[:digit:]]\+$" || die "Invalid IP number/position $SRV_IP_NUMBER"
		[ "$SRV_VIRTUAL_IFACE" ] || die "Undefined virtual interface"

		[ "$GW_IFACE" ] || die "Undefined physical interface"
		get_interface_list | grep -qFx "$GW_IFACE" || die "Invalid physical interface $GW_IFACE"
		shift
	done

	# recopile necessary data

	# get ip/mask in CIDR notation
	CIDR="$(get_iface_cidr "$GW_IFACE")"
	[ "$CIDR" ] || die "Unable to retrieve IP address from $GW_IFACE"

	# get SRV_IP_NUMBER available ip in subnet
	SRV_CIDR="$(get_srv_cidr "$CIDR" "$SRV_IP_NUMBER")"

	# check existence of SRV_VIRTUAL_IFACE and create if needed
	if ! get_interface_list | grep -qFx "$SRV_VIRTUAL_IFACE" ; then
		create_virt_iface "$SRV_VIRTUAL_IFACE" "$GW_IFACE"
		# test creation
		get_interface_list | grep -qFx "$SRV_VIRTUAL_IFACE" || die "Unable to create virtual interface $SRV_VIRTUAL_IFACE"
	fi

	# assign SRV_IP to virtual interface
	# TODO: test this code !!!!!!!
	ip link set dev "$SRV_VIRTUAL_IFACE" down
	ip addr add "$SRV_CIDR" dev "$SRV_VIRTUAL_IFACE"
	ip link set dev "$SRV_VIRTUAL_IFACE" up

	# extract SRV_IP
	SRV_IP="${SRV_CIDR%/*}"

	# update server n4d variables
	# TODO: please avoid this dirty trick ...
	# BEGIN 
	N4DVARS_DIR="/var/lib/n4d/variables"
	N4DVARS_FILES="SRV_IP,$SRV_IP CLIENT_LDAP_URI,ldaps://$SRV_IP CLIENT_LDAP_URI_NOSSL,ldap://$SRV_IP"
	N4DVARS_BACKUP_DIR="/tmp/n4dvars-backup/$(date "+%s")"
	mkdir -p "$N4DVARS_BACKUP_DIR"
	for f in $N4DVARS_FILES ; do
		VAR_FILE="${N4DVARS_DIR}/${f%,*}"
		VAR_VALUE="${f#*,}"
		if [ -e "$VAR_FILE" ] ; then
			# make a copy
			BASENAME_FILE="$(basename "$VAR_FILE")"
			cp "$VAR_FILE" "$N4DVARS_BACKUP_DIR/${BASENAME_FILE}"
			sed -i -e "/\"value\":/s%:.*$%: \"$VAR_VALUE\",%" "$VAR_FILE"
		fi
	done
	service n4d restart
	# END

}

################
# main program #
################
main "$@"
exit 0

